name: Creación de Infraestructura

on:
  workflow_dispatch:  # Permite ejecutar el workflow manualmente desde la interfaz de GitHub

jobs:
  terraform_deployment:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Obtener las últimas imágenes por servicio y ambiente
    - name: Obtener últimas imágenes de ECR
      run: |
        # Servicios y ambientes
        SERVICES=("orders-service" "payments-service" "products-service" "shipping-service")
        ENVIRONMENTS=("dev" "staging" "prod")
        AWS_REGION="${{ secrets.AWS_REGION }}"

        # Funcion para obtener la ultima imagen de un repositorio
        get_latest_image_tag() {
          local repo=$1
          aws ecr describe-images \
            --repository-name "$repo" \
            --region "$AWS_REGION" \
            --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' \
            --output text
        }

        # Itera sobre servicios y ambientes
        for SERVICE in "${SERVICES[@]}"; do
          for ENV in "${ENVIRONMENTS[@]}"; do
            REPO_NAME="${SERVICE}-${ENV}"
            LATEST_TAG=$(get_latest_image_tag "$REPO_NAME")
            echo "Última imagen para $REPO_NAME: $LATEST_TAG"
            echo "${SERVICE}_${ENV}_IMAGE=$LATEST_TAG" >> $GITHUB_ENV
          done
        done

    - name: Configurar Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Inicializar Terraform
      working-directory: terraform
      run: terraform init

    - name: Aplicar Terraform
      run: |
        # Servicios y ambientes
        SERVICES=("orders-service" "payments-service" "products-service" "shipping-service")
        ENVIRONMENTS=("dev" "staging" "prod")

        # Iterar sobre los ambientes
        for ENV in "${ENVIRONMENTS[@]}"; do
          echo "Cambiando al workspace: $ENV"

          # Selecciona o crea el workspace
          terraform workspace select "$ENV" || terraform workspace new "$ENV"

          # Iterar sobre los servicios
          for SERVICE in "${SERVICES[@]}"; do
            IMAGE_VAR="${SERVICE}_${ENV}_IMAGE"
            DOCKER_IMAGE="${!IMAGE_VAR}"  # Obtiene el valor de la variable dinámica

            echo "Aplicando Terraform para $SERVICE en el ambiente $ENV con la imagen $DOCKER_IMAGE"
            terraform apply -auto-approve -var="project=$SERVICE" -var="docker-image=$DOCKER_IMAGE"
          done
        done
